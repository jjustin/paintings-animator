## Comaprison of cucim and skimage for PAT

import json
from time import time_ns
import numpy as np
import cupy as cp
import cv2 as cv
from cucim.skimage.transform import warp as warp_gpu, PiecewiseAffineTransform as p_gpu
from skimage.transform import warp as warp_cpu, PiecewiseAffineTransform as p_cpu
from skimage import io
from matplotlib import pyplot as plt


def imshow(image):
    io.imshow(image)
    plt.show()


def gpu_imshow(image_gpu):
    image = cp.asnumpy(image_gpu)
    imshow(image)


image_cpu = cv.imread('image7.jpg')
image_gpu = cp.asarray(image_cpu)


time = {
    "warp": {"gpu": 0, "cpu": 0},
    "estimate": {"gpu": 0, "cpu": 0},
}

pts_fr = [[105.0, 136.53548387096774], [107.0, 146.76774193548388], [110.23225806451613, 155.76774193548388], [113.0, 165.0], [118.0, 172.53548387096774], [125.0, 179.53548387096774], [134.0, 184.53548387096774], [144.23225806451612, 187.30322580645162], [153.0, 187.53548387096774], [161.0, 184.53548387096774], [167.0, 179.53548387096774], [172.0, 172.53548387096774], [176.0, 164.76774193548388], [177.0, 155.53548387096774], [177.76774193548388, 146.53548387096774], [177.76774193548388, 137.53548387096774], [177.0, 127.53548387096774], [113.23225806451613, 129.69677419354838], [118.69677419354839, 124.92903225806451], [124.92903225806451, 122.92903225806451], [131.92903225806452, 123.16129032258064], [139.16129032258064, 125.16129032258064], [149.83870967741936, 123.69677419354839], [155.60645161290321, 119.92903225806451], [161.83870967741936, 117.92903225806451], [168.07096774193548, 117.69677419354839], [172.53548387096774, 121.46451612903226], [146.0, 132.0], [148.0, 138.76774193548388], [149.0, 144.76774193548388], [151.0, 151.53548387096774], [143.23225806451612, 156.53548387096774], [147.0, 156.53548387096774], [151.0, 157.30322580645162], [154.0, 156.53548387096774], [155.76774193548388, 154.76774193548388], [
    121.23225806451613, 135.76774193548388], [125.23225806451613, 133.0], [130.23225806451612, 132.76774193548388], [134.76774193548388, 134.53548387096774], [130.23225806451612, 136.53548387096774], [125.46451612903226, 137.53548387096774], [154.76774193548388, 132.53548387096774], [157.76774193548388, 128.30322580645162], [162.53548387096774, 127.53548387096774], [166.53548387096774, 128.30322580645162], [163.53548387096774, 131.30322580645162], [158.76774193548388, 132.30322580645162], [137.0, 167.30322580645162], [143.23225806451612, 166.0], [148.0, 165.0], [151.0, 165.0], [154.0, 163.76774193548388], [157.76774193548388, 163.76774193548388], [161.76774193548388, 164.53548387096774], [159.0, 168.53548387096774], [155.23225806451612, 169.53548387096774], [152.0, 170.53548387096774], [149.23225806451612, 170.53548387096774], [144.23225806451612, 169.53548387096774], [140.0, 167.53548387096774], [148.0, 166.76774193548388], [151.0, 166.76774193548388], [154.0, 165.76774193548388], [161.0, 164.76774193548388], [155.0, 165.76774193548388], [152.0, 166.76774193548388], [148.0, 166.76774193548388], [102, 116], [179, 116], [102, 190], [179, 190], [140, 116], [140, 190], [179, 153], [102, 153], [0, 0], [320, 0], [0, 400], [320, 400]]
pts_to = [[105, 137], [107, 147], [110, 156], [113, 165], [118, 173], [125, 180], [134, 185], [144, 188], [153, 188], [161, 185], [167, 180], [172, 173], [176, 165], [177, 156], [178, 147], [178, 138], [177, 128], [113, 129], [118, 124], [124, 122], [131, 122], [138, 124], [151, 123], [157, 119], [163, 117], [169, 117], [173, 121], [146, 132], [148, 139], [149, 145], [151, 152], [143, 157], [147, 157], [151, 158], [154, 157], [156, 155], [121, 136], [125, 133], [130, 133], [
    135, 135], [130, 137], [125, 138], [155, 133], [158, 129], [163, 128], [167, 129], [164, 132], [159, 133], [137, 168], [143, 166], [148, 165], [151, 165], [154, 164], [158, 164], [162, 165], [159, 169], [155, 170], [152, 171], [149, 171], [144, 170], [140, 168], [148, 167], [151, 167], [154, 166], [161, 165], [155, 166], [152, 167], [148, 167], [102, 116], [179, 116], [102, 190], [179, 190], [140, 116], [140, 190], [179, 153], [102, 153], [0, 0], [320, 0], [0, 400], [320, 400]]

# pts_fr = [[0, 0], [300, 300], [0, 300], [300, 0]]
# pts_to = [[300, 300], [0, 0], [300, 0], [0, 300]]

for i in range(30):
    if i % 2 == 0:
        print(i)
    t_start = time_ns()
    p = p_gpu()
    p.estimate(cp.array(pts_fr),
               cp.array(pts_to))
    time["estimate"]["gpu"] += time_ns() - t_start

    t_start = time_ns()
    im = warp_gpu(image_gpu, p)
    time["warp"]["gpu"] += time_ns() - t_start

    # if i == 0:
    # gpu_imshow(im)

for i in range(30):
    if i % 2 == 0:
        print(i)
    t_start = time_ns()
    p = p_cpu()
    p.estimate(np.array(pts_fr),
               np.array(pts_to))
    time["estimate"]["cpu"] += time_ns() - t_start

    t_start = time_ns()
    im = warp_cpu(image_cpu, p)
    time["warp"]["cpu"] += time_ns() - t_start

print(json.dumps(time, indent=2))
time_w = time["warp"]
diff_w = time_w["gpu"] - time_w["cpu"]
time_w_gpu = time_w["gpu"]

time_e = time["estimate"]
diff_e = time_e["gpu"] - time_e["cpu"]
time_e_gpu = time_e["gpu"]

speedup_e = time_e["cpu"]/time_e["gpu"]
speedup_w = time_w["cpu"]/time_w["gpu"]
speedup = (time_w["cpu"]+time_e["cpu"]) / (time_w["gpu"]+time_e["gpu"])
time_total = time_w_gpu + time_e_gpu


def to_s(ns_time):
    return ns_time/1000000000


print(
    f"warp: took {to_s(time_w_gpu)}s {to_s(diff_w)}s (x{speedup_w})")
print(
    f"esti: took {to_s(time_e_gpu)}s {to_s(diff_e)}s (x{speedup_e})")
print(
    f"ttal: took {to_s(time_total)}s {to_s(diff_e+diff_w)}s (x{speedup}")
